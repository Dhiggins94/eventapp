this is my notes taking area for which i'll write about the things i've learn while making a site with next.js


1.server side rendering / statci generation (next.js specality) will allow the site to fetch the data and pre render the componets on server. which makes pages ready to render on site whenever a requests hits the server.

2.SSR is helpful for improving the perfomance of a website, caches data and works good for search engine optimization. though it is not important for all pages such as when someone needs to log in on a specific page to see content. search engines wont need to see such a page because the user needs to log in first to see the content which makes clienet side rendering preferable. for a site like an event website we want our content to be picked up by the search engine scrolls so theres more of a chance to get the site seen by a more people.


3. to make this website we're going to need 18 pages; home, about us, events, events per city 3 each, 12 single event pages. with next js we can generate 3 static pages and 2 dyanmic pages which reduces our page count to 18. the 3 pages will be our events while the other two will be template pages.

4. in terms of file structing the files to take note of will be the "styles" folder which contains our global and home css, our "public" where we can store vids,pics, fonts, icons and it would also be avalible to anyone, pages folder which will hold any file based routing for pages such as about us, home, events etc. the api folder is where we make our backend connections using next.js with examples using the hello.js which is an api endpoint. in all we really have 3 folders to worry about PUBLIC, PAGES, STYLES.

5.when making an quick page next will automatically handle generate the routing for it as long as the path name matches the file,

6. the index page IS the default route next page.

7. nested folder routes is also possible, so anytime next js finds an index file within a folder, next will automatically make a route path for the file. next js watches changes in the url and when it does it navigates us to that specific page and prevents  the browser from sending extra requests from hitting the server.

8. this introduces an "Ease of use" between base form react to nextjs. react would need an router library to manage it all , while nextJS you can make multiple pages and next will take care of all of them automatically with using other libraries.

9. we create dyanmic pages so we can have a template that will dyanmically render the content and create paths for each event. we do that by making an identifier by making an [id].js file. you can name the file anything you like such as [event-id] its just commonly used as [id] as long as their square brackets nextJS will recognize it as a dyanmic file. this page will loaded for different paths and different page names, EX: http://localhost:3000/events/1234 or http://localhost:3000/events/2 will load that single page.

10. to handle events per city, we can get next to handle it them dyanmically. by creating a sub folder and run them dyanmically by adding the square brackets (which we did with the category folder aka [cat]).

11.now we're moving on to connecting the paths on the events page to the events page that list the events for that specific city. we're going to use data from the data.json to connect the content for the events to the events in those specific cities. we're going to do server side rendering in order to render our content dyanmically. we use the function called "getserversideprop" outside the regular export page and it returns an object that has props and we will use it to return any props we want the page to have.

12. another way to pre render our content on the page we're going to use a method called static generation (for nextjs we use the function getStaticPaths/props). it works by having next pre-render all the pages in advance during the build time of the app, we pre-render those pages before it gets deployed. it keeps updating itself even after it deploys without needing to redploy the app. 

13.now we're connecting the events pages to their individual/specific page. when we start giving our events proper route pages nextJs will generate all the pages in html which gives one html per event category item aka showing a page based on our categories.  next is going to look for event path and start generate a page for each events example "/events/london" and will make the others for san francsico and barcelona. since nextjs doesnt know how many pages we want or what to do with the data regardless if it was coming from an internal or external api we have to use next's getStaticPaths to tell next what we want to make at build time

14.in static generation we have two functions, both needs to be standalone serverside rendering functions known as getStaticPaths and getStaticProps. for dyanmic pages we need both functions for static pages we need only the getStaticProps because we only need paths when we need to specify how many paths we need. nextjs checks our whole project and makes that many html pages an routes based on our data, after that it'll get data for each page. in example for our getStaticPaths we have 3 paths that equals up to it making 3 pages, afterwards it'll go to getStaticProps function to fetch the data it needs to generate the componet. once it knows how many pages and routes it needs to create to make it. it'll go to the getStaticProps and fetch the data for each page and send to out "EventsCatPage" component. the fact that this is a dynamic page component is also considered a "template" is because in theory we can have 100+ events and only need to create one page an one template for each.

15. nextjs version of Link helps us transition/ navigate pages easier. we can use a property called passhref to force an href to its link child. 

16. NEXT JS 13 DOES NOT NEED ANCHOR TAGS IN THEIR LINKS REMOVE THEM.